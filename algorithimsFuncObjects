#include <string>
#include <vector>
#include <iostream>
#include<algorithm>


template<typename T>
class Summer {
public:
	Summer(const T& initial_value) : sum(initial_value) {}
	void operator() (const T& x)
	{
		sum += x;
		std::cout << sum << "\n";
	}
private:
	T sum;
};

// a function template that has the compiler deduce how to instantiate the
// function object class

template <typename X>
Summer<X> make_Summer(const X& x)
{
	return Summer<X>(x);
}
int main()
{
  using namespace std;
	vector<int>vi;
	for (int i = 0; i < 4; i++)
	vi.push_back(i + 1);
	vector<string> vs;
	vs.push_back(" we ");
	vs.push_back("love ");
	vs.push_back("the ");

	vs.push_back("summer ");
	vs.push_back("time.");
	string start("ok");
	// instantiate the function object class directly
	for_each(vi.begin(), vi.end(), Summer<int>(10));
	for_each(vs.begin(), vs.end(), Summer<string>(start));
	// instantiate the function object class using the supplied parameter type
	for_each(vi.begin(), vi.end(), make_Summer(10));
	for_each(vs.begin(), vs.end(), make_Summer(start));
}
