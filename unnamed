#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;
// a function object class that calculates a mean, accumulating every supplied value

class Avarega {
public:
	Avarega() :sum(0.0), n{ 0 } {}

	void operator()(double x)
	{
		sum += x;
		++n;
	}
	int get_cnt_n()const
	{
		return n;
	}
	double get_avarage()const
	{
		return static_cast<double>(sum / n);
	}
private:
	double sum{};
	int n{};
};

// prototypes
void test1();
void test2();


int main()
{
	test1();
	//test2();
}

void test1()
{
	cout << "Enter a value ^Z (EOF) when done:" << endl;

	double x;
	Avarega cm;

	while (cin >> x)
		cm(x);	// use like an ordinary function

	cout << endl;
	cout << "mean of " << cm.get_cnt_n()<< " values is " << cm.get_avarage() << endl;
}

void test2()
{
	cout << "Enter a bunch of values, ^Z (EOF) when done:" << endl;
	vector<double> data;
	double x;
	while (cin >> x)
		data.push_back(x);

	// use with an algorithm
	Avarega cm = for_each(data.begin(), data.end(), Avarega());

	cout << endl;
	cout << "mean of " << cm.get_cnt_n() << " values is " << cm.get_avarage() << endl;
}
